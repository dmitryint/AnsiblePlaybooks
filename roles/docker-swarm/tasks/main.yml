---

- name: Check Swarm node status
  shell: docker info
  changed_when: False
  register: docker_info

- name: Init Swarm Mode on the first manager.
  shell: docker swarm init
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
  when: "docker_info.stdout.find('Swarm: active') == -1
    and inventory_hostname == groups['manager'][0]"

- name: Get the worker join-token.
  shell: docker swarm join-token -q worker
  changed_when: False
  run_once: true
  register: docker_worker_token
  when: inventory_hostname == groups['manager'][0]

- name: Get the manager join-token.
  shell: docker swarm join-token -q manager
  changed_when: False
  run_once: true
  register: docker_manager_token
  when: inventory_hostname == groups['manager'][0]

- name: Export the address of the first Swarm manager as a fact.
  set_fact:
    docker_manager_address: "{{ docker_swarm_addr }}:{{ docker_swarm_port }}"
  run_once: true
  when: inventory_hostname == groups['manager'][0]

- name: Join the pending Swarm worker nodes.
  shell: docker swarm join
        --token "{{ docker_worker_token.stdout }}"
          {{ hostvars.manager1.private_ip  }}
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'worker' in group_names"

- name: Join the pending Swarm manager nodes.
  shell: docker swarm join
        --listen-addr {{ docker_swarm_addr }}:{{ docker_swarm_port }}
        --advertise-addr {{ docker_swarm_addr }}
        --token "{{ docker_manager_token.stdout }}"
        {{ hostvars.manager1.private_ip }}
        
  changed_when: False
  when: "docker_info.stdout.find('Swarm: active') == -1
    and docker_info.stdout.find('Swarm: pending') == -1
    and 'manager' in group_names
    and inventory_hostname != groups['manager'][0]"
    
- name: Drain the manager node in swarm cluster
  shell: docker node update --availability drain manager1
  when: inventory_hostname == groups['manager'][0]


